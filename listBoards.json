{
   "Arduino":[
      {
         "name":"Arduino BT w\/ ATmega168",
         "description":"The Arduino BT is a microcontroller board originally was based on the ATmega168, but now is supplied with the 328. It supports wireless serial communication over bluetooth (but is not compatible with Bluetooth headsets or other audio devices). It contains everything needed to support the microcontroller and can be programmed wirelessly over the Bluetooth connection.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"14336",
            "speed":"19200",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xdd",
            "extended_fuses":"0x00",
            "path":"bt",
            "file":"ATmegaBOOT_168.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega168",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"eightanaloginputs"
         },
         "id":25
      },
      {
         "name":"Arduino BT w\/ ATmega328 (untested)",
         "description":"The Arduino BT is a microcontroller board originally was based on the ATmega168, but now is supplied with the 328. It supports wireless serial communication over bluetooth (but is not compatible with Bluetooth headsets or other audio devices). It contains everything needed to support the microcontroller and can be programmed wirelessly over the Bluetooth connection.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"28672",
            "speed":"19200",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0x05",
            "path":"bt",
            "file":"ATmegaBOOT_168_atmega328_bt.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"eightanaloginputs"
         },
         "id":24
      },
      {
         "name":"Arduino Diecimila or Duemilanove w\/ ATmega168",
         "description":"The Duemilanove automatically selects the appropriate power supply (USB or external power), eliminating the need for the power selection jumper found on previous boards. It also adds an easiest to cut trace for disabling the auto-reset, along with a solder jumper for re-enabling it.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"14336",
            "speed":"19200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xdd",
            "extended_fuses":"0x00",
            "path":"atmega",
            "file":"ATmegaBOOT_168_diecimila.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega168",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":4
      },
      {
         "name":"Arduino Duemilanove w\/ ATmega328",
         "description":"Around March 1st, 2009, the Duemilanove started to ship with the ATmega328p instead of the ATmega168. The ATmega328 has 32 KB, (also with 2 KB used for the bootloader).",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xda",
            "extended_fuses":"0x05",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":3
      },
      {
         "name":"Arduino Esplora",
         "description":"Arduino Esplora is a microcontroller board derived from the Arduino Leonardo. The Esplora differs from all preceding Arduino boards in that it provides a number of built-in, ready-to-use setof onboard sensors for interaction. It has onboard sound and light outputs, and several input sensors, including a joystick, a slider, a temperature sensor, an accelerometer, a microphone, and a light sensor.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-Esplora.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x2341",
            "pid":"0x803C",
            "core":"arduino",
            "variant":"leonardo"
         },
         "id":20
      },
      {
         "name":"Arduino Ethernet",
         "description":"The Ethernet differs from other boards in that it does not have an onboard USB-to-serial driver chip, but has a Wiznet Ethernet interface. This is the same interface found on the Ethernet shield.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"32256",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xde",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":12
      },
      {
         "name":"Arduino Fio",
         "description":"An Arduino intended for use as a wireless node. Has a header for an XBee radio, a connector for a LiPo battery, and a battery charging circuit.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xda",
            "extended_fuses":"0x05",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega328_pro_8MHz.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"eightanaloginputs"
         },
         "id":13
      },
      {
         "name":"Arduino Leonardo",
         "description":"The Leonardo differs from all preceding boards in that the ATmega32u4 has built-in USB communication, eliminating the need for a secondary processor. This allows the Leonardo to appear to a connected computer as a mouse and keyboard, in addition to a virtual (CDC) serial \/ COM port.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-Leonardo.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "vid":"0x2341",
            "pid":"0x8036",
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"leonardo"
         },
         "id":9
      },
      {
         "name":"Arduino Mega (ATmega1280)",
         "description":"A larger, more powerful Arduino board. Has extra digital pins, PWM pins, analog inputs, serial ports, etc. The original Arduino Mega has an ATmega1280 and an FTDI USB-to-serial chip.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"126976",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xda",
            "extended_fuses":"0xf5",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega1280.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega1280",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"mega"
         },
         "id":8
      },
      {
         "name":"Arduino Mega 2560 or Mega ADK",
         "description":"The Mega 2560 is an update to the Arduino Mega, which it replaces. It features the Atmega2560, which has twice the memory, and uses the ATMega 8U2 for USB-to-serial communication.",
         "upload":{
            "protocol":"wiring",
            "maximum_size":"258048",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xfd",
            "path":"stk500v2",
            "file":"stk500boot_v2_mega2560.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega2560",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"mega"
         },
         "id":7
      },
      {
         "name":"Arduino Micro",
         "description":"The Arduino Micro is a microcontroller board based on the ATmega32u4 (datasheet), developed in conjunction with Adafruit. It contains everything needed to support the microcontroller; simply connect it to a computer with a micro USB cable to get started. It has a form factor that enables it to be easily placed on a breadboard.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-Micro.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x2341",
            "pid":"0x8037",
            "core":"arduino",
            "variant":"micro"
         },
         "id":19
      },
      {
         "name":"Arduino Mini w\/ ATmega168",
         "description":"Older Arduino Mini version with the ATmega168 microcontroller.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"14336",
            "speed":"19200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xdd",
            "extended_fuses":"0x00",
            "path":"atmega",
            "file":"ATmegaBOOT_168_ng.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega168",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"eightanaloginputs"
         },
         "id":11
      },
      {
         "name":"Arduino Mini w\/ ATmega328",
         "description":"The Mini is a compact Arduino board, intended for use on breadboards and when space is at a premium. This version has an ATmega328.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"28672",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328-Mini.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"eightanaloginputs"
         },
         "id":10
      },
      {
         "name":"Arduino Nano w\/ ATmega168",
         "description":"Older Arduino Nano with ATmega168 instead of the newer ATmega328.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"14336",
            "speed":"19200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xdd",
            "extended_fuses":"0x00",
            "path":"atmega",
            "file":"ATmegaBOOT_168_diecimila.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega168",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"eightanaloginputs"
         },
         "id":6
      },
      {
         "name":"Arduino Nano w\/ ATmega328",
         "description":"The Arduino Nano is an all-in-one, compact design for use in breadboards. Version 3.0 has an ATmega328.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xda",
            "extended_fuses":"0x05",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"eightanaloginputs"
         },
         "id":5
      },
      {
         "name":"Arduino NG or older w\/ ATmega8 (untested)",
         "description":"The Arduino NG uses the FTDI FT232RL USB-to-Serial converter, which requires fewer external components that the FT232BM. It also has a built-in LED on pin 13 (which may interfere with SPI communication). Later NG's shipped with an ATmega168 instead of an ATmega8, though either chip can be used with any board. ",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"7168",
            "speed":"19200"
         },
         "bootloader":{
            "low_fuses":"0xdf",
            "high_fuses":"0xca",
            "path":"atmega8",
            "file":"ATmegaBOOT-prod-firmware-2009-11-07.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega8",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":27
      },
      {
         "name":"Arduino NG or older w\/ ATmega168 (untested)",
         "description":"The Arduino NG uses the FTDI FT232RL USB-to-Serial converter, which requires fewer external components that the FT232BM. It also has a built-in LED on pin 13 (which may interfere with SPI communication). Later NG's shipped with an ATmega168 instead of an ATmega8, though either chip can be used with any board. ",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"14336",
            "speed":"19200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xdd",
            "path":"atmega",
            "file":"ATmegaBOOT_168_ng.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega168",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":26
      },
      {
         "name":"Arduino Pro or Pro Mini (3.3V, 8 MHz) w\/ ATmega168",
         "description":"The Arduino Pro is intended for semi-permanent installation in objects or exhibitions. The board comes without pre-mounted headers, allowing the use of various types of connectors or direct soldering of wires. The pin layout is compatible with Arduino shields.  The Arduino Pro Mini pin layout is compatible with the Arduino Mini.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"14336",
            "speed":"19200"
         },
         "bootloader":{
            "low_fuses":"0xc6",
            "high_fuses":"0xdd",
            "extended_fuses":"0x00",
            "path":"atmega",
            "file":"ATmegaBOOT_168_pro_8MHz.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega168",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":17
      },
      {
         "name":"Arduino Pro or Pro Mini (3.3V, 8 MHz) w\/ ATmega328",
         "description":"The Arduino Pro is intended for semi-permanent installation in objects or exhibitions. The board comes without pre-mounted headers, allowing the use of various types of connectors or direct soldering of wires. The pin layout is compatible with Arduino shields.  The Arduino Pro Mini pin layout is compatible with the Arduino Mini.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xFF",
            "high_fuses":"0xDA",
            "extended_fuses":"0x05",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega328_pro_8MHz.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":16
      },
      {
         "name":"Arduino Pro or Pro Mini (5V, 16 MHz) w\/ ATmega168",
         "description":"The Arduino Pro is intended for semi-permanent installation in objects or exhibitions. The board comes without pre-mounted headers, allowing the use of various types of connectors or direct soldering of wires. The pin layout is compatible with Arduino shields.  The Arduino Pro Mini pin layout is compatible with the Arduino Mini.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"14336",
            "speed":"19200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xdd",
            "extended_fuses":"0x00",
            "path":"atmega",
            "file":"ATmegaBOOT_168_diecimila.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega168",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":15
      },
      {
         "name":"Arduino Pro or Pro Mini (5V, 16 MHz) w\/ ATmega328",
         "description":"The Arduino Pro is intended for semi-permanent installation in objects or exhibitions. The board comes without pre-mounted headers, allowing the use of various types of connectors or direct soldering of wires. The pin layout is compatible with Arduino shields.  The Arduino Pro Mini pin layout is compatible with the Arduino Mini.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xFF",
            "high_fuses":"0xDA",
            "extended_fuses":"0x05",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":14
      },
      {
         "name":"Arduino Robot Control",
         "description":"The Arduino Robot is the first official Arduino on wheels. The robot has two processors, one on each of its two boards. The Control Board reads sensors and decides how to operate.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina-Arduino_Robot",
            "file":"Caterina-Robot-Control.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x2341",
            "pid":"0x8038",
            "core":"robot",
            "variant":"robot_control"
         },
         "id":29
      },
      {
         "name":"Arduino Robot Motor",
         "description":"The Arduino Robot is the first official Arduino on wheels. The robot has two processors, one on each of its two boards. The Motor Board controls the motors. ",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina-Arduino_Robot",
            "file":"Caterina-Robot-Motor.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x2341",
            "pid":"0x8039",
            "core":"robot",
            "variant":"robot_motor"
         },
         "id":30
      },
      {
         "name":"Arduino Uno",
         "description":"The Uno is the reference model for the Arduino platform. It has 14 digital input\/output pins (of which 6 can be used as PWM outputs), 6 analog inputs, a 16 MHz ceramic resonator, a USB connection, a power jack, an ICSP header, and a reset button. It does not use the FTDI USB-to-serial driver chip. Instead, it features the Atmega16U2 (Atmega8U2 up to version R2) programmed as a USB-to-serial converter.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"32256",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xde",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":1
      },
      {
         "name":"LilyPad Arduino USB",
         "description":"The LilyPad USB is replacing the classic ATMega328 with the new ATMega32U4. LilyPad is a wearable e-textile technology developed by Leah Buechley and cooperatively designed by Leah and SparkFun. Each LilyPad was creatively designed to have large connecting pads to allow them to be sewn into clothing. Various input, output, power, and sensor boards are available. They're even washable!",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xce",
            "path":"caterina-LilyPadUSB",
            "file":"Caterina-LilyPadUSB.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"8000000L",
            "vid":"0x1B4F",
            "pid":"0x9208",
            "core":"arduino",
            "variant":"leonardo"
         },
         "id":21
      },
      {
         "name":"LilyPad Arduino w\/ ATmega168",
         "description":"LilyPad is a wearable e-textile technology developed by Leah Buechley and cooperatively designed by Leah and SparkFun. Each LilyPad was creatively designed to have large connecting pads to allow them to be sewn into clothing. Various input, output, power, and sensor boards are available. They're even washable!",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"14336",
            "speed":"19200"
         },
         "bootloader":{
            "low_fuses":"0xe2",
            "high_fuses":"0xdd",
            "extended_fuses":"0x00",
            "path":"lilypad",
            "file":"LilyPadBOOT_168.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega168",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":23
      },
      {
         "name":"LilyPad Arduino w\/ ATmega328",
         "description":"LilyPad is a wearable e-textile technology developed by Leah Buechley and cooperatively designed by Leah and SparkFun. Each LilyPad was creatively designed to have large connecting pads to allow them to be sewn into clothing. Various input, output, power, and sensor boards are available. They're even washable!",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xFF",
            "high_fuses":"0xDA",
            "extended_fuses":"0x05",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega328_pro_8MHz.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":22
      }
   ],
   "TinyCircuits":[
      {
         "name":"TinyDuino",
         "description":"TinyDuino is a completely Arduino compatible platform smaller than the size of a quarter, yet with all the power and functionality of the Arduino Uno board - including Shield Support!",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xFF",
            "high_fuses":"0xDA",
            "extended_fuses":"0x05",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega328_pro_8MHz.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":18
      },
      {
         "name":"TinyLily Mini",
         "description":"For all your tiny e-textile (or just general electronics) needs, the TinyCircuits TinyLily family is an extremely compact and low cost way to add intelligence to your projects. Inspired by the popular Lilypad Arduino, the TinyLily family allows your projects to shrink considerably, allowing you greater creativity in what you can do \u2013 yet still has all the power of a standard LilyPad Arduino at 1\/12th the size!",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xFF",
            "high_fuses":"0xDA",
            "extended_fuses":"0x05",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega328_pro_8MHz.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":51
      }
   ],
   "RedBearLab":[
      {
         "name":"Blend",
         "description":"Blend is an integrated development board, with Bluetooth 4.0 Low Energy (aka BLE or Bluetooth Smart) into a single board. It is targeted for makers to develop low power Internet-Of-Things (IoT) projects quickly and easily.  Blend is 100% compatible with sketches and Shields that work with Arduino Leonardo. The micro-controller unit (MCU) is Atmel ATmega32U4 and the BLE chip is Nordic nRF8001.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-Blend.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x2341",
            "pid":"0x8036",
            "core":"arduino:arduino",
            "variant":"Blend"
         },
         "id":42
      },
      {
         "name":"Blend Micro 3.3V\/8MHz",
         "description":"Blend Micro is RedBearLabs' first integrated developement board, they have \"blend\"ed Arduino with Bluetooth 4.0 Low Energy (aka BLE or Bluetooth Smart) into a single board. It is targeted for makers to develop low power Internet-Of-Things (IoT) projects quickly and easily.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcf",
            "path":"caterina",
            "file":"Caterina-BlendMicro.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"8000000L",
            "vid":"0x03EB",
            "pid":"0x2404",
            "core":"arduino:arduino",
            "variant":"BlendMicro-8MHz"
         },
         "id":40
      },
      {
         "name":"Blend Micro 3.3V\/16MHz (overclock)",
         "description":"Blend Micro is RedBearLabs' first integrated developement board, they have \"blend\"ed Arduino with Bluetooth 4.0 Low Energy (aka BLE or Bluetooth Smart) into a single board. It is targeted for makers to develop low power Internet-Of-Things (IoT) projects quickly and easily.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcf",
            "path":"caterina",
            "file":"Caterina-BlendMicro.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x03EB",
            "pid":"0x2404",
            "core":"arduino:arduino",
            "variant":"BlendMicro-16MHz"
         },
         "id":41
      }
   ],
   "LowPowerLab":[
      {
         "name":"Moteino",
         "description":"Moteino is a low cost low-power open-source wireless Arduino UNO development platform clone based on the popular ATMega328 chip used in traditional Arduinos.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"31744",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xDE",
            "high_fuses":"0xDC",
            "extended_fuses":"0xFD",
            "path":"Moteino",
            "file":"DualOptiboot_V5.0_atmega328_BlinkD9.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0xCF"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino:arduino",
            "variant":"arduino:standard"
         },
         "id":54
      },
      {
         "name":"MoteinoMEGA",
         "description":"MoteinoMEGA is a new generation Moteino based on the more resourceful Atmega1284p microcontroller. It runs at 3.3V\/16Mhz. It has 128KB of internal flash (vs just 32KB on the Atmega328p), 16KB of RAM (vs just 2KB), 4KB EEPROM (vs 1KB), two hardware serial ports, 8xPWM pins and bunch more IO in general.",
         "upload":{
            "tool":"avrdude",
            "maximum_size":"130048",
            "maximum_data_size":"16384",
            "speed":"115200",
            "protocol":"arduino"
         },
         "bootloader":{
            "low_fuses":"0xDE",
            "high_fuses":"0xDE",
            "extended_fuses":"0xFD",
            "unlock_bits":"0x3F",
            "lock_bits":"0xCF",
            "path":"MoteinoMEGA",
            "file":"DualOptiboot_V5.0_atmega1284p_BlinkD15.hex"
         },
         "build":{
            "mcu":"atmega1284p",
            "f_cpu":"16000000L",
            "core":"arduino:arduino",
            "variant":"MoteinoMEGA"
         },
         "id":55
      }
   ],
   "SparkFun Electronics":[
      {
         "name":"BadgerStick",
         "description":"Interactive Badges for faires, designed to teach the basics of PTH soldering, as well as to provide users with an Arduino platform they could take home and hack.",
         "upload":{
            "tool":"avrdude",
            "protocol":"arduino",
            "maximum_data_size":"2048",
            "maximum_size":"30720",
            "speed":"250000"
         },
         "bootloader":{
            "tool":"avrdude",
            "low_fuses":"0xFD",
            "high_fuses":"0xDA",
            "extended_fuses":"0x06",
            "file":"ATmegaBOOT_168_atmega328_pro_4MHz.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "board":"BADGERSTICK",
            "mcu":"atmega328p",
            "f_cpu":"4000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":83
      },
      {
         "name":"MicroView",
         "description":"The MicroView is the first chip-sized Arduino compatible that lets you see what your Arduino is thinking using a built-in OLED display.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"32256",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xde",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":28
      },
      {
         "name":"SparkFun Digital Sandbox",
         "description":"The Digital Sandbox is a learning platform that engages both the software and hardware worlds. It\u2019s powered by a microcontroller that can interact with real-world inputs \u2013 like light or temperature sensors \u2013 while at the same time controlling LEDs, motors, and other outputs.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xFF",
            "high_fuses":"0xDA",
            "extended_fuses":"0x05",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega328_pro_8MHz.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":37
      },
      {
         "name":"SparkFun Fio V3 3.3V\/8MHz",
         "description":"The Fio v3 is a new spin on the Arduino Fio hardware powered by the ATmega32U4.Not only is it small and LiPo-ready, it\u2019s a very capable XBee-ready development board.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xfe",
            "path":"caterina",
            "file":"Caterina-fio.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"8000000L",
            "vid":"0x1B4F",
            "pid":"0xF101",
            "core":"arduino:arduino",
            "variant":"promicro"
         },
         "id":35
      },
      {
         "name":"SparkFun Makey Makey",
         "description":"Using the MaKey MaKey you can make anything into a key (get it?) just by connecting a few alligator clips. The MaKey MaKey is an invention kit that tricks your computer into thinking that almost anything is a keyboard. This allows you to hook up all kinds of fun things as an input.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-makey.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x1B4F",
            "pid":"0x2B75",
            "core":"arduino",
            "variant":"promicro"
         },
         "id":36
      },
      {
         "name":"Sparkfun Mega Pro 2560V 3.3V",
         "description":"It\u2019s powerful, it\u2019s portable, it\u2019s Pro! This is a 3.3V microcontroller running a version of the stk500v2 bootloader at 8MHz. Just like the other Pro-series boards this board is built with all SMD components and comes with no headers populated in order to minimize the cost and the board profile. Of course this board has the same pin-configuration as the Arduino Mega so it is dimensionally shield compatible (but do keep in mind that this is a 3.3V board unlike the Arduino Mega).",
         "upload":{
            "protocol":"stk500v2",
            "maximum_size":"258048",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xE2",
            "high_fuses":"0xD4",
            "extended_fuses":"0xFD",
            "path":"",
            "file":"MegaPro3.3V-8MHz-57600.hex",
            "lock_bits":"0xCF"
         },
         "build":{
            "mcu":"atmega2560",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"mega"
         },
         "id":32
      },
      {
         "name":"SparkFun Pro Micro 3.3V\/8MHz",
         "description":"The Pro Micro is similar to the Pro Mini except with an ATmega32U4 on board. The USB transceiver inside the 32U4 allows it to have USB connectivity on-board and do away with bulky external USB interface.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xfe",
            "path":"caterina",
            "file":"Caterina-promicro8.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"8000000L",
            "vid":"0x1B4F",
            "pid":"0x9204",
            "core":"arduino:arduino",
            "variant":"promicro"
         },
         "id":34
      },
      {
         "name":"SparkFun Pro Micro 5V\/16MHz",
         "description":"The Pro Micro is similar to the Pro Mini except with an ATmega32U4 on board. The USB transceiver inside the 32U4 allows it to have USB connectivity on-board and do away with bulky external USB interface.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-promicro16.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x1B4F",
            "pid":"0x9206",
            "core":"arduino:arduino",
            "variant":"promicro"
         },
         "id":33
      },
      {
         "name":"Sparkfun RedBoard",
         "description":"The RedBoard combines the simplicity of the UNO's Optiboot bootloader (which is used in the Pro series), the stability of the FTDI (which we all missed after the Duemilanove was discontinued) and the R3 shield compatibility of the latest Arduino UNO R3.   The RedBoard can be programmed over a USB Mini-B cable using the Arduino IDE: Just plug in the board, select \"Arduino UNO\" from the board menu and you're ready to upload code. RedBoard has all of the hardware peripherals you know and love.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"32256",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xde",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":31
      }
   ],
   "SeeedStudio":[
      {
         "name":"Seeeduino Mega 2560",
         "description":"Seeeduino Mega is a powerful microcontroller derived from Arduino Mega. It features ATmega2560 processor which brings a large number of I\/O pins, as much as 70 digital I\/O, 16 analog inputs, 14 PWM, and 4 hardware serial ports. Compared to Arduino Mega, they've shrunk the volume of Arduino Mega by at least 30% and made it 100% compatible with Seeed Shield products.",
         "upload":{
            "protocol":"wiring",
            "maximum_size":"258048",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xfd",
            "path":"stk500v2",
            "file":"stk500boot_v2_mega2560.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega2560",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"mega"
         },
         "id":92
      },
      {
         "name":"Seeeduino Stalker v3",
         "description":"Seeeduino Stalker v3 is an Arduino compatible main board which has various functions. It's an X-Bee carrier board while using with X-Bee modules, such as GPS Bee, Bluetooth Bee and Wifi Bee, etc. It's a charger for Lipo while plugging a solar panel onto the board. Also, you can get time from the inside RTC chip, and all data can be easily stored through the SD card.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xFF",
            "high_fuses":"0xDA",
            "extended_fuses":"0x05",
            "path":"atmega",
            "file":"ATmegaBOOT_168_atmega328_pro_8MHz.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":93
      }
   ],
   "Adafruit Industries":[
      {
         "name":"Adafruit Circuit Playground",
         "description":"Would you like to learn electronics, with an all-in-one board that has sensors and LEDs built in? Circuit Playground is here - and it's the best way to practice programming on real hardware with no soldering or sewing required!",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true",
            "use_1200bps_touch":"true",
            "wait_for_upload_port":"true",
            "tool":"arduino:avrdude"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "file":"caterina\/Caterina-Circuitplay32u4.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F",
            "tool":"arduino:avrdude"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"8000000L",
            "vid":"0x239A",
            "pid":"0x8011",
            "core":"arduino:arduino",
            "variant":"circuitplay32u4",
            "board":"AVR_CIRCUITPLAY",
            "usb_product":"\"Circuit Playground\"",
            "usb_manufacturer":"\"Adafruit\"",
            "extra_flags":"{build.usb_flags}"
         },
         "id":96
      },
      {
         "name":"Adafruit FLORA",
         "description":"FLORA is Adafruit's fully-featured wearable electronics platform. It's a round, sewable, Arduino-compatible microcontroller designed to empower amazing wearables projects.   FLORA comes with Adafruit's support, tutorials and projects. Check out dozens of FLORA tutorials on the Adafruit Learning System, with more added every week by Becky Stern, director of wearable electronics, and their dedicated wearables staff. ",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-Flora8.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"8000000L",
            "vid":"0x239A",
            "pid":"0x8004",
            "core":"arduino",
            "variant":"flora"
         },
         "id":44
      },
      {
         "name":"Adafruit Gemma 8MHz",
         "description":"Love FLORA but want a bite-sized version? Look no further, GEMMA is a tiny wearable platform board with a lot of might in a 1\" diameter package. Powered by a Attiny85 and programmable with an Arduino IDE over USB, you'll be able to realize any wearable project! ",
         "upload":{
            "maximum_size":"5310"
         },
         "bootloader":{
            "low_fuses":"0xF1",
            "high_fuses":"0xD5",
            "extended_fuses":"0xFE"
         },
         "build":{
            "mcu":"attiny85",
            "f_cpu":"8000000L",
            "core":"arduino:arduino",
            "variant":"tiny8"
         },
         "id":43
      },
      {
         "name":"Adafruit Pro Trinket 3V\/12MHz (FTDI)",
         "description":"Trinket's got a big sister in town - the Pro Trinket 3V! Pro Trinket combines everything you love about Trinket with the familiarity of the core Arduino chip, the ATmega328. It's like an Arduino Pro Mini with more pins and USB tossed in. This is the 3V version of the Pro Trinket. Use this when programming via FTDI.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"28672",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd0",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"12000000L",
            "core":"arduino:arduino",
            "variant":"arduino:eightanaloginputs"
         },
         "id":50
      },
      {
         "name":"Adafruit Pro Trinket 3V\/12MHz (USB)",
         "description":"Trinket's got a big sister in town - the Pro Trinket 3V! Pro Trinket combines everything you love about Trinket with the familiarity of the core Arduino chip, the ATmega328. It's like an Arduino Pro Mini with more pins and USB tossed in. This is the 3V version of the Pro Trinket.",
         "upload":{
            "using":"usbtiny",
            "maximum_size":"28672",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd0",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"12000000L",
            "core":"arduino:arduino",
            "variant":"arduino:eightanaloginputs"
         },
         "id":48
      },
      {
         "name":"Adafruit Pro Trinket 5V\/16MHz (FTDI)",
         "description":"Trinket's got a big sister in town - the Pro Trinket 5V! Pro Trinket combines everything you love about Trinket with the familiarity of the common core Arduino chip, the ATmega328. It's like an Arduino Pro Mini with more pins and USB tossed in, so delicious. Choose this when programming via FTDI.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"28672",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd0",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino:arduino",
            "variant":"arduino:eightanaloginputs"
         },
         "id":49
      },
      {
         "name":"Adafruit Pro Trinket 5V\/16MHz (USB)",
         "description":"Trinket's got a big sister in town - the Pro Trinket 5V! Pro Trinket combines everything you love about Trinket with the familiarity of the common core Arduino chip, the ATmega328. It's like an Arduino Pro Mini with more pins and USB tossed in, so delicious.",
         "upload":{
            "using":"usbtiny",
            "maximum_size":"28672",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd0",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino:arduino",
            "variant":"arduino:eightanaloginputs"
         },
         "id":47
      },
      {
         "name":"Adafruit Trinket 8MHz",
         "description":"Trinket may be small, but do not be fooled by its size! It's a tiny microcontroller board, built around the Atmel ATtiny85, a little chip with a lot of power. Perfect for when you don't want to give up your expensive dev-board and you aren't willing to take apart the project you worked so hard to design.",
         "upload":{
            "maximum_size":"5310"
         },
         "bootloader":{
            "low_fuses":"0xF1",
            "high_fuses":"0xD5",
            "extended_fuses":"0xFE"
         },
         "build":{
            "mcu":"attiny85",
            "f_cpu":"8000000L",
            "core":"arduino:arduino",
            "variant":"tiny8"
         },
         "id":45
      },
      {
         "name":"Adafruit Trinket 16MHz",
         "description":"Trinket may be small, but do not be fooled by its size! It's a tiny microcontroller board, built around the Atmel ATtiny85, a little chip with a lot of power. Perfect for when you don't want to give up your expensive dev-board and you aren't willing to take apart the project you worked so hard to design.",
         "upload":{
            "maximum_size":"5310"
         },
         "bootloader":{
            "low_fuses":"0xF1",
            "high_fuses":"0xD5",
            "extended_fuses":"0xFE"
         },
         "build":{
            "mcu":"attiny85",
            "f_cpu":"16000000L",
            "core":"arduino:arduino",
            "variant":"tiny8"
         },
         "id":46
      }
   ],
   "Makeblock":[
      {
         "name":"mCore",
         "description":"mCore is an easy-to-use main control board specially designed for mBot. Based on Arduino Uno, mCore integrates various onboard sensors, such as buzzer, light sensor, RGB LED, etc., which provides you an easier way to start learning electronics.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"32256",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xde",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":87
      },
      {
         "name":"Orion",
         "description":"Makeblock Orion is an easy-to-use mainboard based on Arduino Uno with improvements for education. It provides eight RJ25 ports to connect to all the other Me series modules with color-labels, can save you from horrible pin-wiring and help you focus on inventor amazing projects.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"32256",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xde",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":88
      }
   ],
   "Other Vendors":[
      {
         "name":"ArcBotics Sparki",
         "description":"Sparki is an easy to use, affordable arduino robot. Featuring more than 15 sensors it can be used for projects such as maze solving, room navigation, line following and more.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-Leonardo.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x2341",
            "pid":"0x8036",
            "core":"arduino",
            "variant":"leonardo"
         },
         "id":95
      },
      {
         "name":"Arduboy",
         "description":"Arduboy, the game system the size of a credit card. Create your own games, learn to program or download from a library of open source games for free!",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-Leonardo.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x2341",
            "pid":"0x8036",
            "core":"arduino",
            "variant":"arduboy"
         },
         "id":90
      },
      {
         "name":"Arduboy Devkit",
         "description":"The Arduboy development kit is a bare circuit board with the same components as the the final design for the Arduboy. The developer kit is powered by a coin cell battery, and does not have a case. But it's still pretty fun!",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-Leonardo.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x2341",
            "pid":"0x8036",
            "core":"arduino",
            "variant":"arduboy_devkit"
         },
         "id":91
      },
      {
         "name":"arLCD by EarthMake",
         "description":"The arLCD is an Arduino Uno and an ezLCD303 3.5\" TFT display with touchscreen on a single board. Widgets are supported to make a very powerful LCD display.  www.earthmake.com",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"32768",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xfe",
            "high_fuses":"0xdf",
            "extended_fuses":"0x05",
            "unlock_bits":"0x3F",
            "lock_bits":"0x3F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":52
      },
      {
         "name":"Arno",
         "description":"Learning the basics of electronics and programming is challenging. Learning them while juggling piles of tiny parts, jumper wires, and breadboards is even more difficult. With the Arno, we've gotten rid of the piles of parts. Everything you need to learn Arduino and complete interesting projects in already built in. The board comes fully assembled, ready to plug in with the included USB cable. Focus on learning how the circuits work and learning the Arduino language, then tackle the rest.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-Leonardo.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "vid":"0x2341",
            "pid":"0x8036",
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"leonardo"
         },
         "id":2
      },
      {
         "name":"Geekuino",
         "description":"Arduino board for geeks.",
         "upload":{
            "protocol":"other",
            "maximum_size":"32256",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xde",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":81
      },
      {
         "name":"Hummingbird Duo",
         "description":"A Robotics Kit for Ages 10 to 110. Make and program robots, animatronics, and more with Hummingbird Duo. It may be the first electronics kit that is fun and educational for a fourth grader, a high school student, a college engineering student, or an adult maker.",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-HBDuo.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "vid":"0x2354",
            "pid":"0x2333",
            "core":"arduino",
            "variant":"leonardo"
         },
         "id":82
      },
      {
         "name":"Kocoafab OrangeBoard",
         "description":"Arduino Uno R3 compatible board made in Korea",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"32256",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xde",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":85
      },
      {
         "name":"Kocoafab OrangeBoard BLE",
         "description":"Arduino Uno R3 compatible board with BLE (Bluetooth 4.0) module made in Korea",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"32256",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xde",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":86
      },
      {
         "name":"LightUp",
         "description":"LightUp's Arduino-compatible microcontroller block makes getting started with programming hardware accessible to kids. Just magnetically clip the programming wand to the block and you're ready to go!",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"lightup",
            "file":"LightUp.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "mcu":"atmega32u4",
            "f_cpu":"8000000L",
            "vid":"0x1d50",
            "pid":"0x6096",
            "core":"arduino",
            "variant":"leonardo"
         },
         "id":53
      },
      {
         "name":"littleBits Arduino",
         "description":"Using the littleBits Arduino module you can easily incorporate programming into your littleBits circuits! It\u2019s everything you know and love about Arduino without the breadboarding, soldering or wiring. Simply plug into your computer, snap together some modules, and program away!",
         "upload":{
            "protocol":"avr109",
            "maximum_size":"28672",
            "speed":"57600",
            "disable_flushing":"true"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xd8",
            "extended_fuses":"0xcb",
            "path":"caterina",
            "file":"Caterina-Leonardo.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x2F"
         },
         "build":{
            "vid":"0x2341",
            "pid":"0x8036",
            "mcu":"atmega32u4",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"leonardo"
         },
         "id":89
      },
      {
         "name":"Maker Board",
         "description":"Maker Board is a simple computer that you can learn to program in minutes. You can use it with speakers, lights, buttons, sensors and many other components provided in LetsStartCoding kits.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"32256",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xff",
            "high_fuses":"0xde",
            "extended_fuses":"0x05",
            "path":"optiboot",
            "file":"optiboot_atmega328.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"16000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":94
      },
      {
         "name":"Rokit-SmartInventor-mega32_v2",
         "description":"Rokit Smart is a user-friendly robotics kit that teaches building and programming (using Arduino) of robots without soldering",
         "upload":{
            "tool":"avrdude",
            "protocol":"arduino",
            "maximum_size":"32336",
            "speed":"115200"
         },
         "bootloader":{
            "tool":"avrdude",
            "low_fuses":"0xc2",
            "high_fuses":"0xbf",
            "extended_fuses":"0xff",
            "file":"SmartInventor-mega32_v2\/boot_SmartInventor.hex",
            "unlock_bits":"0x3f",
            "lock_bits":"0x0bf"
         },
         "build":{
            "mcu":"atmega32",
            "f_cpu":"7372800L",
            "board":"SmartInventor-mega32_v2",
            "core":"atmega32",
            "variant":"SmartInventor"
         },
         "id":103
      },
      {
         "name":"The AirBoard",
         "description":"The AirBoard is an ultra power efficient wireless platform designed to explore, hack and deploy your prototype out in the field in seconds. Based on an ATmega328P@8MHz, it offers Over-The-Air Programming, a built-in battery with Battery Management System for 3 years autonomy, a breakout board connector and a shield header for WiFi, Bluetooth, BLE, XBee, GSM\/GPRS and SIGFOX.",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"30720",
            "speed":"57600"
         },
         "bootloader":{
            "low_fuses":"0xFF",
            "high_fuses":"0xDA",
            "extended_fuses":"0x05",
            "path":"arduino:atmega",
            "file":"ATmegaBOOT_168_atmega328_pro_8MHz.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega328p",
            "f_cpu":"8000000L",
            "core":"arduino",
            "variant":"standard"
         },
         "id":84
      },
      {
         "name":"WildFire v2 [stk500]",
         "description":"WildFire is an Arduino compatible board based on the Atmel ATMega1284P microcontroller and a Texas Instruments CC3000 WiFi module. Also included is an SD card slot and MAC\/EEPROM chip. Version 2",
         "upload":{
            "protocol":"wiring",
            "maximum_size":"122878",
            "speed":"38400"
         },
         "bootloader":{
            "low_fuses":"0xd7",
            "high_fuses":"0xd8",
            "extended_fuses":"0xfd",
            "path":"stk500v2",
            "file":"stk500boot_v2_wildfire.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega1284p",
            "f_cpu":"16000000L",
            "board":"WILDFIRE_V2",
            "core":"arduino:arduino",
            "variant":"wildfirev2"
         },
         "id":38
      },
      {
         "name":"WildFire v3 [optiboot]",
         "description":"WildFire is an Arduino compatible board based on the Atmel ATMega1284P microcontroller and a Texas Instruments CC3000 WiFi module. Also included is an SD card slot and MAC\/EEPROM chip. Version 3",
         "upload":{
            "protocol":"arduino",
            "maximum_size":"130048",
            "speed":"115200"
         },
         "bootloader":{
            "low_fuses":"0xf7",
            "high_fuses":"0xde",
            "extended_fuses":"0xfd",
            "path":"optiboot",
            "file":"optiboot_wildfirev2.hex",
            "unlock_bits":"0x3F",
            "lock_bits":"0x0F"
         },
         "build":{
            "mcu":"atmega1284p",
            "f_cpu":"16000000L",
            "board":"WILDFIRE_V3",
            "core":"arduino:arduino",
            "variant":"wildfirev3"
         },
         "id":39
      }
   ],
   "AtTiny uProcessors":[
      {
         "name":"ATtiny44 (1 MHz internal osc; BOD disabled) Arduino-Tiny core",
         "description":"Attiny44 uC with the Google Code Arduino-Tiny core, configured with internal clock at 1 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"4096"
         },
         "bootloader":{
            "low_fuses":"0x62",
            "high_fuses":"0xD7",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty44at1.hex"
         },
         "build":{
            "mcu":"attiny44",
            "f_cpu":"1000000L",
            "core":"tiny"
         },
         "id":68
      },
      {
         "name":"ATtiny44 (8 MHz internal osc; BOD disabled) Arduino-Tiny core",
         "description":"Attiny44 uC with the Google Code Arduino-Tiny core, configured fwith internal clock at 8 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"4096"
         },
         "bootloader":{
            "low_fuses":"0xE2",
            "high_fuses":"0xD7",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty44at8.hex"
         },
         "build":{
            "mcu":"attiny44",
            "f_cpu":"8000000L",
            "core":"tiny"
         },
         "id":69
      },
      {
         "name":"ATtiny44 (external 20 MHz clock) D. A. Mellis core",
         "description":"Attiny44 uC with the David A. Mellis core, configured with external clock at 20 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"4096"
         },
         "bootloader":{
            "low_fuses":"0xfe",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny44",
            "f_cpu":"20000000L",
            "core":"arduino:arduino",
            "variant":"tiny14"
         },
         "id":64
      },
      {
         "name":"ATtiny44 (internal 1 MHz clock) D. A. Mellis core",
         "description":"Attiny44 uC with the David A. Mellis core, configured with internal clock at 1 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"4096"
         },
         "bootloader":{
            "low_fuses":"0x62",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny44",
            "f_cpu":"1000000L",
            "core":"arduino:arduino",
            "variant":"tiny14"
         },
         "id":62
      },
      {
         "name":"ATtiny44 (internal 8 MHz clock) D. A. Mellis core",
         "description":"Attiny44 uC with the David A. Mellis core, configured with internal clock at 8 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"4096"
         },
         "bootloader":{
            "low_fuses":"0xe2",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny44",
            "f_cpu":"8000000L",
            "core":"arduino:arduino",
            "variant":"tiny14"
         },
         "id":63
      },
      {
         "name":"ATtiny45 (1 MHz internal osc) Arduino-Tiny core",
         "description":"Attiny45 uC with the Google Code Arduino-Tiny core, configured with internal clock at 1 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"4096"
         },
         "bootloader":{
            "low_fuses":"0x62",
            "high_fuses":"0xD7",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty45at1.hex"
         },
         "build":{
            "mcu":"attiny45",
            "f_cpu":"1000000L",
            "core":"tiny"
         },
         "id":70
      },
      {
         "name":"ATtiny45 (8 MHz internal osc) Arduino-Tiny core",
         "description":"Attiny45 uC with the Google Code Arduino-Tiny core, configured with internal clock at 8 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"4096"
         },
         "bootloader":{
            "low_fuses":"0xE2",
            "high_fuses":"0xD7",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty45at8.hex"
         },
         "build":{
            "mcu":"attiny45",
            "f_cpu":"8000000L",
            "core":"tiny"
         },
         "id":71
      },
      {
         "name":"ATtiny45 (external 20 MHz clock) D. A. Mellis core",
         "description":"Attiny45 uC with the David A. Mellis core, configured with external clock at 20 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"4096"
         },
         "bootloader":{
            "low_fuses":"0xfe",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny45",
            "f_cpu":"20000000L",
            "core":"arduino:arduino",
            "variant":"tiny8"
         },
         "id":58
      },
      {
         "name":"ATtiny45 (internal 1 MHz clock) D. A. Mellis core",
         "description":"Attiny45 uC with the David A. Mellis core, configured with internal clock at 1 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"4096"
         },
         "bootloader":{
            "low_fuses":"0x62",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny45",
            "f_cpu":"1000000L",
            "core":"arduino:arduino",
            "variant":"tiny8"
         },
         "id":56
      },
      {
         "name":"ATtiny45 (internal 8 MHz clock) D. A. Mellis core",
         "description":"Attiny45 uC with the David A. Mellis core, configured with internal clock at 8 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"4096"
         },
         "bootloader":{
            "low_fuses":"0xe2",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny45",
            "f_cpu":"8000000L",
            "core":"arduino:arduino",
            "variant":"tiny8"
         },
         "id":57
      },
      {
         "name":"ATtiny84 (1 MHz internal osc; BOD disabled) Arduino-Tiny core",
         "description":"Attiny84 uC with the Google Code Arduino-Tiny core, configured with internal clock at 1 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0x62",
            "high_fuses":"0xD7",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty84at1.hex"
         },
         "build":{
            "mcu":"attiny84",
            "f_cpu":"1000000L",
            "core":"tiny"
         },
         "id":72
      },
      {
         "name":"ATtiny84 (8 MHz internal osc; BOD disabled) Arduino-Tiny core",
         "description":"Attiny84 uC with the Google Code Arduino-Tiny core, configured with internal clock at 8 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0xE2",
            "high_fuses":"0xD7",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty84at8.hex"
         },
         "build":{
            "mcu":"attiny84",
            "f_cpu":"8000000L",
            "core":"tiny"
         },
         "id":73
      },
      {
         "name":"ATtiny84 (16 MHz ext. crystal; 4.3 V BOD) Arduino-Tiny core",
         "description":"Attiny84 uC with the Google Code Arduino-Tiny core, configured for use with an external crystal at 16 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0xFF",
            "high_fuses":"0xD4",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty84at16.hex"
         },
         "build":{
            "mcu":"attiny84",
            "f_cpu":"16000000L",
            "core":"tiny"
         },
         "id":74
      },
      {
         "name":"ATtiny84 (external 20 MHz clock) D. A. Mellis core",
         "description":"Attiny84 uC with the David A. Mellis core, configured with external clock at 20 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0xfe",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny84",
            "f_cpu":"20000000L",
            "core":"arduino:arduino",
            "variant":"tiny14"
         },
         "id":67
      },
      {
         "name":"ATtiny84 (internal 1 MHz clock) D. A. Mellis core",
         "description":"Attiny84 uC with the David A. Mellis core, configured with internal clock at 1 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0x62",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny84",
            "f_cpu":"1000000L",
            "core":"arduino:arduino",
            "variant":"tiny14"
         },
         "id":65
      },
      {
         "name":"ATtiny84 (internal 8 MHz clock) D. A. Mellis core",
         "description":"Attiny84 uC with the David A. Mellis core, configured with internal clock at 8 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0xe2",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny84",
            "f_cpu":"8000000L",
            "core":"arduino:arduino",
            "variant":"tiny14"
         },
         "id":66
      },
      {
         "name":"ATtiny85 (1 MHz internal osc; BOD disabled) Arduino-Tiny core",
         "description":"Attiny85 uC with the Google Code Arduino-Tiny core, configured with internal clock at 1 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0x62",
            "high_fuses":"0xD7",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty85at1.hex"
         },
         "build":{
            "mcu":"attiny85",
            "f_cpu":"1000000L",
            "core":"tiny"
         },
         "id":75
      },
      {
         "name":"ATtiny85 (8 MHz internal osc; BOD disabled) Arduino-Tiny core",
         "description":"Attiny85 uC with the Google Code Arduino-Tiny core, configured with internal clock at 8 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0xE2",
            "high_fuses":"0xD7",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty85at8.hex"
         },
         "build":{
            "mcu":"attiny85",
            "f_cpu":"8000000L",
            "core":"tiny"
         },
         "id":76
      },
      {
         "name":"ATtiny85 (16 MHz ext crystal; 4.3 V BOD) Arduino-Tiny core",
         "description":"Attiny85 uC with the Google Code Arduino-Tiny core, configured with internal High Frequency PLL clock at 16 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0xFF",
            "high_fuses":"0xD4",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty85at16.hex"
         },
         "build":{
            "mcu":"attiny85",
            "f_cpu":"16000000L",
            "core":"tiny"
         },
         "id":77
      },
      {
         "name":"ATtiny85 (16 MHz internal PLL; 4.3 V BOD) Arduino-Tiny core",
         "description":"Attiny85 uC with the Google Code Arduino-Tiny core, configured with an external clock at 16 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0xC1",
            "high_fuses":"0xD4",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty85at16.hex"
         },
         "build":{
            "mcu":"attiny85",
            "f_cpu":"16000000L",
            "core":"tiny"
         },
         "id":78
      },
      {
         "name":"ATtiny85 (external 20 MHz clock) D. A. Mellis core",
         "description":"Attiny85 uC with the David A. Mellis core, configured with external clock at 20 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0xfe",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny85",
            "f_cpu":"20000000L",
            "core":"arduino:arduino",
            "variant":"tiny8"
         },
         "id":61
      },
      {
         "name":"ATtiny85 (internal 1 MHz clock) D. A. Mellis core",
         "description":"Attiny85 uC with the David A. Mellis core, configured with internal clock at 1 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0x62",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny85",
            "f_cpu":"1000000L",
            "core":"arduino:arduino",
            "variant":"tiny8"
         },
         "id":59
      },
      {
         "name":"ATtiny85 (internal 8 MHz clock) D. A. Mellis core",
         "description":"Attiny85 uC with the David A. Mellis core, configured with internal clock at 8 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "maximum_size":"8192"
         },
         "bootloader":{
            "low_fuses":"0xe2",
            "high_fuses":"0xdf",
            "extended_fuses":"0xff"
         },
         "build":{
            "mcu":"attiny85",
            "f_cpu":"8000000L",
            "core":"arduino:arduino",
            "variant":"tiny8"
         },
         "id":60
      },
      {
         "name":"Attiny2313 (internal 1 MHz clock) Arduino-Tiny core",
         "description":"Attiny2313 uC with the Google Code Arduino-Tiny core, configured with internal clock at 1 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"2048"
         },
         "bootloader":{
            "low_fuses":"0x64",
            "high_fuses":"0x9F",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty2313at1.hex"
         },
         "build":{
            "mcu":"attiny2313",
            "f_cpu":"1000000L",
            "core":"tiny"
         },
         "id":79
      },
      {
         "name":"Attiny2313 (internal 8 MHz clock) Arduino-Tiny core",
         "description":"Attiny2313 uC with the Google Code Arduino-Tiny core, configured with internal clock at 8 MHz. You can use the \"Burn Bootloader\" page to change the ATTiny\u2019s configuration.",
         "upload":{
            "using":"arduino:arduinoisp",
            "maximum_size":"2048"
         },
         "bootloader":{
            "low_fuses":"0xE4",
            "high_fuses":"0x9F",
            "extended_fuses":"0xFF",
            "path":"empty",
            "file":"empty2313at8.hex"
         },
         "build":{
            "mcu":"attiny2313",
            "f_cpu":"8000000L",
            "core":"tiny"
         },
         "id":80
      }
   ],
   "Old - Deprecated boards":[

   ],
   "Arduino Based Devices":[

   ]
}